paramiko 通过python实现模拟ssh批量登录，scp
ssh 本身也可以传文件
命令为 scp -rp -P20（端口号）root@127.0.0.1:/tmp/
l.可查看隐藏文件 ls -a 查看所有文件


ssh 密钥
RSA-非对称密钥验证
公钥 public key

私钥 private key
 本机             目标机
10.0.0.31 ----->10.0.0.41
 私钥            公钥（给别人）  这是单向登录 31可以无密码登41 41无法登31 必须在41用户目录生成私钥公钥，把公钥给31才能无密码登录
 私钥和公钥是10.0.0.31本机生成的 是一对的(一起生成的)

 生成私钥公钥 ssh-keygen
  /root/.ssh/id_rsa 私钥
  /root/.ssh/id_rsa.pub 公钥将公钥复制到目标机要登录对应用户目录的.ssh目录下authorized_keys文件里  ....
  复制容易出问题，这里有命令可以执行:ssh-copy-id  "-p22 root@10.0.0.41" 注意要加引号
  具体步骤：1.本机ssh-keygen 生成密钥对
            2.ssh-copy-id -i /root/.ssh/id_rsa.pub -p remote_host
            3.输入密码即可将公钥写入远程主机 ~/.ssh/authorized_key里实现无密码登录

 421  421  421
 rwx  rwx  rwx   chmod 777
 属主 属组 others


例如想要在windows上尝试密钥登录 在linux上执行 sz /root/.ssh/id_rsa 就能拷贝到windows本地 ，使用paramiko_rsa.py里登录


线程与进程：
线程：os调用CPU进行运算的最小单位，被包含在进程中（一堆指令）

运算速度 CPU》RAM（内存）》磁盘
每一个程序的内存是独立的 不能互相访问
单核CPU只能同时执行一个任务，但是因为太快了，在cpu内进行上下文切换让我们以为可以同时执行多个任务


进程：程序要以一个整体的形式暴露给操作系统管理，里面包含对各种资源的调用，内存的管理，网络接口的调用等。。
对一个程序各种资源管理的集合就可以称为进程

线程:是操作系统最小的调度单位，是一串指令的集合

进程要操作CPU，必须要先创建一个线程（至少一个） 进程本身不具有执行的功能，而是线程调用cpu
所有在同一个进程的线程共享同一块内存空间

进程与线程的区别：
启动线程更快，但是在运行时进程与线程的速度一样
1.线程共享内存空间，进程的内存是独立的
2.线程与父进程共享内存数据，父进程改变，线程数据会改变，子进程是克隆父进程的数据，改父进程数据不会影响子进程。
3.同一个进程的线程之间可以直接交流，两个进程想通信，必须通过一个中间代理来实现
4.创建新线程很简单，创建新进程需要对其父进程进行一次克隆
5.一个线程可以控制和操作同一进程里的其他线程，但是进程只能操作子进程
6.对一个线程进行修改会影响到统一进程的其他线程，对进程进行修改，但是其子进程不会修改


Python设计缺陷（Python GIL）：只能是C python解释器的设计缺陷
无论多少核CPU 永远都是同一时间只有一个线程在运行（GIL global interperter lock (全局解释器锁)） Python是假并行
因为Python起的是通过c解释器调用系统的原生线程
python 可以产生多核cpu起线程 但只有一个线程在运行（为防止数据混乱 所以python加上了GIL （java c# 是起的自己的线程））

队列
class queue.Queue() 先入先出
class queue.LifoQueue() 后入先出
class queue.PriortyQueue() 存储数据时可设置优先级队列
