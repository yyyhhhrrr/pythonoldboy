IO（磁盘，网络等）操作不占用CPU
计算占用CPU，例如1+1
多线程使用场景:python多线程不适合CPU密集操作型的任务，适合IO密集型的任务(例如socket server )


进程
每一个进程都是由默认父进程启动的（每一个子进程都是由主进程启动的）
比如在pycharm启动程序 ，在windows上是pycharm为父进程：主进程的父进程为pycharm
比如在linux终端启动程序，在linux上是terminal为父进程,主进程的父进程为terminal

多进程（multiprocess
进程间的通信：不同进程之间是不允许访问对方内存的，要实现通信，只能通过以下方式
1.进程Queue
2.pipe 管道
进程间的数据共享：通过manager

进程锁
本身进程之间内存不共享，为什么还需要进程锁？
原因：主要是保证在屏幕上打印的时候不乱


进程池：
进程启动开销比线程启动大很多，所以python有进程池 概念防止电脑崩溃。线程池可以通过信号量自己定义
在windows上启动多进程跟linux不一样 ，要import freeze_support或者加if __name__=='__main__'

__name__的意思  如果再程序里加入 if __name__=='__main__'则是手动执行的时候会执行
如果把该程序当做模块被另外程序import后，另外的程序不执行 if __name__=='__main__'里的内容
__main__代表主进程的__name__ 子进程为__mp_main__的__name__
所以 if __name__=='__main__'是判断是否__name__为主进程（就是当前该程序手动执行自己，被其他模块导入则不执行里面的内容）

有两个方法 apply 同步，串行
           apply_async 异步,并行

            pool.apply_async(func=Foo,args=(1,),callback=Bar)
            callback=回调  执行完Foo 再执行Bar ，注意:回调是主进程调用的而不是子进程,
            例如备份数据库时候只用父进程创建连接，子进程去回调父进程的连接 而不用多次创建连接




协程：（微线程）是一种用户态的轻量级线程
线程的切换是保存在cpu的寄存器里，而协程拥有自己的寄存器上下文和栈。
可以在单线程下实现并发效果（实际上还是串行）

优点：1.无需线程上下文切换的开销
      2.无需原子操作的锁定及同步的开销（改变量可以叫原子操作）
      3.方便切换控制流，简化编程模型
      4.高并发、高扩展、低成本：一个cpu支持上万的协程都不是问题
缺点：1.因为是单线程，无法利用多核资源，它不能同时将单个CPU的多个核用上（不能多核），协程
      需要和进程配合才能运行在多CPU上，除非是CPU密集型应用
      2.进行阻塞（Blocking）操作（如IO）会阻塞掉整个程序

注意：当一个函数含有yield关键字时 ，第一次调用它是变成一个生成器，必须加__next__()才执行

协程是遇到IO操作就切换，所以剩下都是CPU操作就很快

gevent自动IO切换 封装了greenlet （手动IO切换），可以通过greenlet实现并发同步或异步编程
gevent实现大并发单线程socket server（通过协程）很牛逼


------------------------------------





论事件驱动与异步IO
通常，我们写服务器处理模型的程序时，有以下几种模型：
（1）每收到一个请求，创建一个新进程，来处理该请求
（2）每收到一个请求，创建一个新线程，来处理该请求
（3）每收到一个请求，放入一个事件列表，让主进程通过非阻塞IO方式来处理请求（协程） io是操作系统执行的（就是利用事件驱动模型
把io操作扔到操作系统中一个队列，io执行完后调用回调函数告知你执行完的标记）
上面的几种方式，各有千秋：
第（1）种方法，由于创建新的进程的开销比较大，所以，会导致服务器性能比较差，但实现比较简单
第（2）种方法，由于要涉及到线程的同步，有可能面临死锁等问题
第（3）种方法，在写应用程序代码时，逻辑比前面两种都复杂
综合考虑各方面因素，一般普遍认为第（3）种方式是大多数网络服务器采用的方式

事件驱动模型：
1.有一个事件（消息）队列
2.例如鼠标按下时 ，往这个队列中增加一个点击事件（消息）
3.有个循环，不断从队列中取出事件，根据不同的时间，调用不同的函数，如onClick()、onKeyDown()等
4.事件（消息）一般都各自保存各自的处理函数指针，这样，每个消息都有独立的处理函数


                         |————| 消息队列  《--------提取任务-------  处理线程
                         |————|
                         |————|
事件1 ---注册任务 -----》|————|
事件2 ---注册任务 -----》|————|
                         |————|

事件驱动编程是一种编程范式，这里程序的执行流由外部事件决定






IO 多路复用

进程的阻塞：只有处于运行态的进程，才有可能转为阻塞状态。当进程进入阻塞状态时，不会占用CPU资源

文件描述符 fd:就是一组非负整数，是操作系统内部文件记录表（有序的，存放的是句柄对象）的索引值，操作系统拿到文件描述
符，从文件记录表中找到文件句柄对象，从对象中操作数据。在unix,linux上才有文件描述符的概念

缓存I/O:又被称作标准I/O，大多数文件系统默认IO都是缓存IO。在linux缓存IO机制中，数据会先拷贝到操作系统内核的缓存
区中，然后从操作系统内核再拷贝到应用程序的地址空间（比如socket中，两次send会发送在一起（黏包），是因为系统为了减少操作系统内核拷贝
到应用程序的开销。）（内核态---》用户态的数据转换）
缓存IO缺点：这些数据拷贝对cpu以及内存的开销是非常大的










I/O五种网络模式
情景：用户有个read操作

1-3都是同步IO(synchronous IO 必须等内核态到用户态的转变)
1.阻塞IO（blocking iO）
在linux ，默认情况下所有的socket都是阻塞IO (blocking IO)
用户发送read操作到内核 内核中没有数据，在等待数据被发送过来，此时用户进程在等待，当内核中有数据后，再返回给用户。
用户在等待的时候就是阻塞I/O

2.非阻塞IO（nonblocjing io）
linux下可以通过设置socket为nonblocking
用户发送read操作到内核，内核中没有数据，用户不用等内核是或否有数据，内核没有数据会发送一个error到用户，用户收到
内核的信息做判断，当为error的时候可以去做其他事，收到数据之后再处理数据
所以 nonblocking IO的特点是用户进程徐不断的主动询问kernel数据好了没有,可以实现用户视角下的单线程多并发

3.I/O多路复用（IO multiplexing或者 event driven IO 事件驱动IO）
常用的select poll epoll  是建立在非租塞IO的情况下，因为非阻塞IO情况下，在等待
接受数据的时候没有阻塞，但是在拷贝数据的时候，如果从内核拷贝到用户的数据太大，则会阻塞，这是IO多路复用要解决的问题
select （windows,linux） 例如多个连接 循环这些连接，任意一个返回就返回信号（缺点，文件描述符上限1024，当然可以自行修改，如果要循环连接（数组轮询）过多，容易浪费资源）
poll 没有最大文件描述符限制



epoll (最流行的，windows不支持，linux2.6内核.Django就是用的这个,例如nginx)
(1)epoll_create 创建一个epoll对象，一般epollfd = epoll_create()

(2)epoll_ctl （epoll_add/epoll_del的合体），往epoll对象中增加/删除某一个流的某一个事件

比如

epoll_ctl(epollfd, EPOLL_CTL_ADD, socket, EPOLLIN);//注册缓冲区非空事件，即有数据流入

epoll_ctl(epollfd, EPOLL_CTL_DEL, socket, EPOLLOUT);//注册缓冲区非满事件，即流可以被写入

(3)epoll_wait(epollfd,...)等待直到注册的事件发生

（注：当对一个非阻塞流的读写发生缓冲区满或缓冲区空，write/read会返回-1，并设置errno=EAGAIN。而epoll只关心缓冲区非满和缓冲区非空事件）。








4.异步IO（asynchronous IO，不用等内核态到用户态）---用得少（其实很多叫异步IO都用的是IO多路复用 epoll）
发起一个read操作，立刻返回，所以不会对用户进程产生任何block。然后kernel会等待数据准备完成，然后拷贝到用户内存，
当这一切完成之后，kenel会给用户进程发送一个signal，告诉他read操作已完成。

图解 blocking       non-blocking      I/O multipexing                     asynchronous I/O
        |                check                |                              initiate
        |                check                |(select poll epoll)
        |                check                |
        |blocking        check               \|/
        |                  |                 ready
        |                  |                 initiate
        |                  | copy             | blocking
        |                  |                  |
       \|/                \|/                \|/
     complete           complete          complete                           notification






