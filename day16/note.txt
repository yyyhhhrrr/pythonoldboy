为什么学Dom:中小公司用jquery较多，但是大型公司使用原生jquery较少，因为要下载jquery会使得流量增加，所以大公司
一般都是原生Dom结合jquery再开发出适合自己的(知道即可)

today

CSS补充：
  页面布局
  （1）主站布局
  （2）后台管理布局
       postion:
         fixed -- 永远固定在窗口的某个位置
         relative -- 单独无意义
         absolute -- 第一次定位，可以在指定位置，滚动滑轮时就不在了
      第一种布局 左侧跟着滚动条动 pg-content.menu 和pg-content.menu相对于s1.html 变成了 position:absolute
      第二种布局 左侧以及上面不动(s3.html)  这个用的最多 从第一种到第二种只需在pg-content.content里加上overflow:auto

      可以去 font-awesome网站下载他的压缩包解压得到css放入项目就可以使用他的图标


JavaScript
   8.函数
      普通函数：
         function func(){}
      匿名函数：
         setInterval(function(){
                console.log(123);
         },5000)
      自执行函数（创建函数，并自动执行）：
         (function(arg){
             console.log(arg);
         })(1)

   9.序列化
      JSON.stringify() 将对象转换为字符串
      JSON.parase()    将字符串转换为对象

   10.转义
      客户端(cookie) ==》服务器端
      js可实现：将数据经过转义后保存在cookie中 encodeURI(url)

   11.eval
   python:
      val = eval(表达式)
            exec(执行代码)
   JS：
      eval(表达式或代码) 相当于python的eval和exec合集
   12.时间
      Date类
      var d =new Date()

      d.getXXX 获取
      d.setXXX 设置

   13.作用域
      （1）js以函数作为作用域(除了let)
      其他语言： 以代码块作为作用域
                  C#:public void Func(){
                      if(1=1){
                        String name='java';
                      }
                      console.writelinr(name);
                  }
                  Func()
                  //报错
      Python:  以函数作为作用域
          情况一：def func():
                      if 1=1:
                           name='a'
                      print(name)
                  func()

          情况二：def func():
                      if 1=1:
                           name='a'
                      print(name)
                  func()
                  print(name)
                  //报错
      JavaScript:  以函数作为作用域
                  function func(){
                    if(1==1)
                       var name="a";
                  }
                  func()

     （2）函数的作用域在函数未被调用之前，已经创建
     （3）函数的作用域存在作用域链，并且也是在被调用之前创建
        示例1：
        x="yang";
        function func(){
               var x="hao";
               fucntion inner(){
                console.log(x);
        }
                return inner;
        }

        var ret = func();
        ret();
        // 输出 hao

        示例2：
        x="yang";
        function func(){
               var x="hao";
               fucntion inner(){
                console.log(x);
        }
               var x="ran";
                return inner;
        }

        var ret = func();
        ret();
        // 输出ran


        （4）函数内局部变量提前声明

     14.JS面向对象
          function Foo(n){
               this.name=n;
          }
          var obj=new Foo('we');
          //obj.name=we
          (1)this 代指对象（python self）
          (2)创建对象时  new 函数名()

        原型：
           function Foo(){
               this.name=n;
           }
           # Foo的原型
           Foo.prototype = {
              'sayName':function(){
                  console.log(this.name)
              }
           }
           obj1 =new Foo('we');
           obj1.sayName()


DOM document object model
    查找
        直接查找
           var obj=document.getElementById('id1')
        间接查找
           文件内容操作：
              innerText 仅文本
              innerHTML 仅内容
              value
                  input value 获取当前标签中的值
                  select 获取选中的value值 （selectedIndex）
              搜索框的示例
        样式操作：
              className
              classList
                 classList.add
                 classList.remove

              obj.style.fontSize="16px";
        属性操作：
             obj.setAttribute('value','yang')
             obj.attributes 获取所有属性
             obj.removeAttribute
        创建标签，并添加到html中
             a.字符串形式
             b.对象的形式
                document.createElement('div')
        提交表单
             任何标签通过dom都可以提交表单
             document.getElementById('form').submit()
        其他
           console.log 输出
           alter 弹窗
           var f=confirm(信息) 确认框 f为true flase
           location.href 获取当前url
           location.href="" 重定向 跳转
           location.reload() 页面刷新

           setInterval(func,5000) 定时器
           clearInterval(obj)
           setTimeout(func,5000) 5s之后执行
    事件：
        onclick  onblur onfocus
        绑定事件两种方式：
           a.直接标签绑定  onclick=..
           b.先获取dom对象 然后进行绑定
              document.getElementById('xxx').onclick
           this 当前触发事件的标签
           a.第一种绑定方式
              <input type='button' onclick='clikOn(this)'

              function ClickOn(self){
              // self 当前点击的标签
              }
              }
           b.第二种绑定方式
              document.getElementById('xx').onclick=function(){
              //this 代表当前点击标签 不是this 会因为作用域 function先放在内存 但是每次调 都不一定是这个obj来调
              }
           作用域实例：
              var myTrs = document.getElementsByTagName("tr");
              var len =myTrs.length;
              for (var i=0;i<length;i++){
              myTrs[i].onmouseover=function{
                     this.style.back.... //必须要用this 不能用myTrs[i]
              }}
              }
           c.第三种绑定方式 （面试题）
              addEventListener(true/false)

              事件的捕捉与冒泡
              true 捕捉  false 冒泡 默认false

              完成需求 点击click 完成两个行为

             <div id="i1">
                 <div id="i2"></div>
             </div>

              var obj1=document.getElementById('i1')
              var obj2=document.getElementById('i2')
              obj1.addEventListener('click',function{console.log('1')},false)
              obj2.addEventListener('click',function{console.log('2')},false)
              冒泡：false 先打印 2 再打印1
              捕捉：true 先打印1 再打印2

重点 JS词法分析（核心）  面试考
浏览器执行函数的时候 并没有马上执行 而是先进行词法分析
function t1(age){
    console.log(age)
    var age=27
    console.log(age)
    function age(){}
    console.log(age)
}
t1(3);
打印结果是 function age{} 27 27

词法顺序
active object AO
1.形式参数
2.函数内局部变量
3.函数内声明表达式

分析：
1.形式参数
AO.age=undefined
AO.age=3
2.局部变量
AO.age=undefined(之前有AO.age=3 但是不会做任何改变)
3。函数声明表达式
AO.age=function()  因为函数优先级比较高 不用undefined
所以执行的时候 age=function(){}
所以结果就是 function 然后age被27覆盖 就是27 最后function调用 输出27